/**
 * Cookie plugin
 *
 * Copyright (c) 2006 Klaus Hartl (stilbuero.de)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */

jQuery.cookie = function (b, j, m) {
  if (typeof j != "undefined") {
    m = m || {};
    if (j === null) {
      j = "";
      m.expires = -1;
    }
    var e = "";
    if (m.expires && (typeof m.expires == "number" || m.expires.toUTCString)) {
      var f;
      if (typeof m.expires == "number") {
        f = new Date();
        f.setTime(f.getTime() + m.expires * 24 * 60 * 60 * 1000);
      } else {
        f = m.expires;
      }
      e = "; expires=" + f.toUTCString();
    }
    var l = m.path ? "; path=" + m.path : "";
    var g = m.domain ? "; domain=" + m.domain : "";
    var a = m.secure ? "; secure" : "";
    document.cookie = [b, "=", encodeURIComponent(j), e, l, g, a].join("");
  } else {
    var d = null;
    if (document.cookie && document.cookie != "") {
      var k = document.cookie.split(";");
      for (var h = 0; h < k.length; h++) {
        var c = jQuery.trim(k[h]);
        if (c.substring(0, b.length + 1) == b + "=") {
          d = decodeURIComponent(c.substring(b.length + 1));
          break;
        }
      }
    }
    return d;
  }
};

/**
 * Module to show Recently Viewed Products
 *
 * Copyright (c) 2014 Caroline Schnapp (11heavens.com)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */

var Shopify = Shopify || {};

Shopify.Products = (function () {
  var a = {
    howManyToShow: 4,
    howManyToStoreInMemory: 10,
    wrapperId: "recently-viewed-products",
    templateId: "recently-viewed-product-template",
    onComplete: null,
  };
  var c = [];
  var h = null;
  var d = null;
  var e = 0;
  var productIds = []; // Create an array to store product IDs
  var b = {
    configuration: { expires: 90, path: "/", domain: window.location.hostname },
    name: "shopify_recently_viewed",
    write: function (i) {
      jQuery.cookie(this.name, i.join(" "), this.configuration);
    },
    read: function () {
      var i = [];
      var j = jQuery.cookie(this.name);
      if (j !== null) {
        i = j.split(" ");
      }
      return i;
    },
    destroy: function () {
      jQuery.cookie(this.name, null, this.configuration);
    },
    remove: function (k) {
      var j = this.read();
      var i = jQuery.inArray(k, j);
      if (i !== -1) {
        j.splice(i, 1);
        this.write(j);
      }
    },
  };
  var f = function () {
    h.show();
    if (a.onComplete) {
      try {
        a.onComplete();
      } catch (i) {}
    }
  };

  // C ARRAY DE PRODUCTOS EN COOKIE

  var g = function () {
    if (c.length && e < a.howManyToShow) {
      jQuery.ajax({
        dataType: "json",
        url: "/products/" + c[1] + ".js",
        cache: false,
        success: function (i) {
          const productID = i.id;
          const productHandle = i.handle;
          /*           console.log(i); */
          getMetafields(productID)
            .then((metafields) => {
              i.index = e + 1;
              i.shortname = metafields.shortName;
              i.model = metafields.model;
              i.color = metafields.color;
              i.gender = metafields.gender;
              // CREATE THE CARD BAGDE
              if (i.tags.includes("NEW")) {
                i.badge = "new";
              }
              // Check if the product is sold out
              else if (!i.available) {
                i.badge = "sold";
              }

              // Check if the product is on sale
              else if (i.compare_at_price > i.price) {
                i.badge = "sale";
              }

              d.tmpl(i).appendTo(h);
              c.shift();
              e++;
              g();
            })
            .catch((error) => {
              // Handle any errors here
              console.error("Error:", error);
            });
        },
        error: function () {
          b.remove(c[0]);
          c.shift();
          g();
        },
      });
    } else {
      f();
    }
  };
  return {
    resizeImage: function (m, j) {
      if (j == null) {
        return m;
      }
      if (j == "master") {
        return m.replace(/http(s)?:/, "");
      }
      var i = m.match(
        /\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif|webp)(\?v=\d+)?/i
      );
      if (i != null) {
        var k = m.split(i[0]);
        var l = i[0];
        return (k[0] + "_" + j + l).replace(/http(s)?:/, "");
      } else {
        return null;
      }
    },
    showRecentlyViewed: function (i) {
      var i = i || {};
      jQuery.extend(a, i);
      c = b.read();
      d = jQuery("#" + a.templateId);
      h = jQuery("#" + a.wrapperId);
      a.howManyToShow = Math.min(c.length, a.howManyToShow);
      if (a.howManyToShow && d.length && h.length) {
        g();
      }
    },
    getConfig: function () {
      return a;
    },
    clearList: function () {
      b.destroy();
    },
    recordRecentlyViewed: function (l) {
      var l = l || {};
      jQuery.extend(a, l);
      var j = b.read();
      if (window.location.pathname.indexOf("/products/") !== -1) {
        var k = window.location.pathname.match(/\/products\/([a-z0-9\-]+)/)[1];
        var i = jQuery.inArray(k, j);
        if (i === -1) {
          j.unshift(k);
          j = j.splice(0, a.howManyToStoreInMemory);
        } else {
          j.splice(i, 1);
          j.unshift(k);
        }
        b.write(j);
      }
    },
    getProductIds: function () {
      return productIds; // Add a function to retrieve product IDs
    },
  };
})();
var Shopify = Shopify || {};
var getMetafields = function (id) {
  return new Promise((resolve, reject) => {
    var myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json");
    myHeaders.append(
      "X-Shopify-Storefront-Access-Token",
      "65302ec703cac627b630bab92f5d9b54"
    );
    // IS THIS REALLY NECESSARY???
    myHeaders.append(
      "Cookie",
      "cart_sig=3e1e0b57bc74f5a639477919e0e006ba; localization=ES; secure_customer_sig="
    );
    // / IS THIS REALLY NECESSARY???
    var graphql = JSON.stringify({
      query:
        'query getProductMetafields($id: ID!) {\n  product(id: $id) {\n    title\n    id\n    handle\n    tags\n    onlineStoreUrl\n    priceRange{\n        minVariantPrice{\n            amount\n            currencyCode\n        }\n    }\n    images(first: 2){\n        edges{\n            node{\n                id\n                url\n            }\n        }\n    }\n    color: metafield(namespace: "rocket", key: "color") {\n      value\n    }\n    model: metafield(namespace: "rocket", key: "model") {\n      value\n    }\n    shortname: metafield(namespace: "rocket", key: "short_name") {\n      value\n    }\n    gender: metafield(namespace: "rocket", key: "gender") {\n      value\n    }\n  }\n}\n\n',
      variables: { id: "gid://shopify/Product/" + id },
    });
    var requestOptions = {
      method: "POST",
      headers: myHeaders,
      body: graphql,
      redirect: "follow",
    };

    fetch(
      "https://gobikdemo.myshopify.com/api/2023-10/graphql.json",
      requestOptions
    )
      .then((response) => response.json())
      .then((result) => {
        let metafieldsObject = {};
        let product = result.data.product;
        // Extract values of specific metafields
        metafieldsObject.shortName = product.shortname.value;
        metafieldsObject.model = product.model.value;
        metafieldsObject.color = product.color.value;
        metafieldsObject.gender = product.gender.value;

        // Resolve the Promise with the metafields object
        resolve(metafieldsObject);
      })
      .catch((error) => {
        console.error("Error fetching metafields:", error);
      });
  });
};

// ---------------------------------------------------------------------------
// Money format handler
// ---------------------------------------------------------------------------
Shopify.money_format = "{{amount}} â‚¬";
Shopify.formatMoney = function (cents, format) {
  if (typeof cents == "string") {
    cents = cents.replace(".", "");
  }
  var value = "";
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = format || this.money_format;

  function defaultOption(opt, def) {
    return typeof opt == "undefined" ? def : opt;
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ",");
    decimal = defaultOption(decimal, ",");

    if (isNaN(number) || number == null) {
      return 0;
    }

    number = (number / 100.0).toFixed(precision);

    var parts = number.split("."),
      dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + thousands),
      cents = parts[1] ? decimal + parts[1] : "";

    return dollars + cents;
  }

  switch (formatString.match(placeholderRegex)[1]) {
    case "amount":
      value = formatWithDelimiters(cents, 2);
      break;
    case "amount_no_decimals":
      value = formatWithDelimiters(cents, 0);
      break;
    case "amount_with_comma_separator":
      value = formatWithDelimiters(cents, 2, ".", ",");
      break;
    case "amount_no_decimals_with_comma_separator":
      value = formatWithDelimiters(cents, 0, ".", ",");
      break;
  }

  return formatString.replace(placeholderRegex, value);
};
